---
export interface Props {
  images: {
    src: string;
    alt: string;
  }[];
  caption?: string;
  className?: string;
}

const { images, caption, className = '' } = Astro.props;
---

<div class={`relative mb-8 group max-w-5xl mx-auto ${className}`}>
  <div class="relative overflow-hidden rounded-2xl shadow-2xl">
    <!-- Images Container -->
    <div 
      class="flex transition-transform duration-500 ease-in-out" 
      id="slider-container"
      style="transform: translateX(0%)"
    >
      {images.map((image, index) => (
        <div class="w-full flex-shrink-0">
          <img 
            alt={image.alt}
            class="w-full object-cover h-64 md:h-80 lg:h-96"
            src={image.src}
            loading={index === 0 ? 'eager' : 'lazy'}
          />
        </div>
      ))}
    </div>

    <!-- Navigation Buttons -->
    <button 
      class="absolute left-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 backdrop-blur-sm"
      aria-label="Imagen anterior"
      id="prev-btn"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6">
        <path d="m15 18-6-6 6-6"></path>
      </svg>
    </button>

    <button 
      class="absolute right-4 top-1/2 -translate-y-1/2 bg-black/50 hover:bg-black/70 text-white p-2 rounded-full opacity-0 group-hover:opacity-100 transition-all duration-300 backdrop-blur-sm"
      aria-label="Siguiente imagen"
      id="next-btn"
    >
      <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="w-6 h-6">
        <path d="m9 18 6-6-6-6"></path>
      </svg>
    </button>
  </div>

  <!-- Dots Indicators -->
  <div class="flex justify-center mt-4 space-x-2" id="dots-container">
    {images.map((_, index) => (
      <button 
        class={`w-3 h-3 rounded-full transition-all duration-300 dot-indicator ${
          index === 0 
            ? 'bg-primary scale-110' 
            : 'bg-gray-400 hover:bg-gray-500'
        }`}
        aria-label={`Ir a imagen ${index + 1}`}
        data-index={index}
    
      ></button>
    ))}
  </div>

  <!-- Caption -->
  {caption && (
    <figcaption class="text-sm text-gray-600 mt-4 italic text-center">
      {caption}
    </figcaption>
  )}
</div>

<script>
  class ImageSlider {
    private container: HTMLElement;
    private prevBtn: HTMLElement;
    private nextBtn: HTMLElement;
    private dots: NodeListOf<HTMLElement>;
    private currentIndex: number = 0;
    private totalImages: number;

    constructor() {
      this.container = document.getElementById('slider-container')!;
      this.prevBtn = document.getElementById('prev-btn')!;
      this.nextBtn = document.getElementById('next-btn')!;
      this.dots = document.querySelectorAll('.dot-indicator');
      this.totalImages = this.dots.length;

      this.init();
    }

    private init() {
      // Navigation buttons
      this.prevBtn.addEventListener('click', () => this.goToPrevious());
      this.nextBtn.addEventListener('click', () => this.goToNext());

      // Dot indicators
      this.dots.forEach((dot, index) => {
        dot.addEventListener('click', () => this.goToSlide(index));
      });

      // Keyboard navigation
      document.addEventListener('keydown', (e) => {
        if (e.key === 'ArrowLeft') this.goToPrevious();
        if (e.key === 'ArrowRight') this.goToNext();
      });

      // Auto-play (optional)
      this.startAutoPlay();
    }

    private goToSlide(index: number) {
      this.currentIndex = index;
      this.updateSlider();
    }

    private goToNext() {
      this.currentIndex = (this.currentIndex + 1) % this.totalImages;
      this.updateSlider();
    }

    private goToPrevious() {
      this.currentIndex = this.currentIndex === 0 
        ? this.totalImages - 1 
        : this.currentIndex - 1;
      this.updateSlider();
    }

    private updateSlider() {
      // Update container position
      const translateX = -this.currentIndex * 100;
      this.container.style.transform = `translateX(${translateX}%)`;

      // Update dots
      this.dots.forEach((dot, index) => {
        if (index === this.currentIndex) {
          dot.className = 'w-3 h-3 rounded-full transition-all duration-300 dot-indicator bg-primary scale-110';
        } else {
          dot.className = 'w-3 h-3 rounded-full transition-all duration-300 dot-indicator bg-gray-400 hover:bg-gray-500';
        }
      });
    }

    private startAutoPlay() {
      setInterval(() => {
        this.goToNext();
      }, 5000); // Change slide every 5 seconds
    }
  }

  // Initialize slider when DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    new ImageSlider();
  });
</script>